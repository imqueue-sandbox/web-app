input addCarInput {
  """
  User identifier or email address. Optional. If not passed user must be authenticated.
  """
  idOrEmail: ID

  """Selected car identifier"""
  carId: String!

  """User's car registration number"""
  regNumber: String!
  clientMutationId: String
}

type addCarPayload {
  """Updated user data object"""
  user: User
  clientMutationId: String
}

"""Base time option item entity"""
type BaseTimeOption {
  """Option key"""
  key: String

  """Option title"""
  title: String

  """Option title"""
  duration: Int
}

"""Car entity"""
type Car implements Node {
  """The ID of an object"""
  id: ID!

  """The ID of an object"""
  carId: ID!

  """Car's manufacturer"""
  make: String

  """Car's model name"""
  model: String

  """Car type (vehicle class)"""
  type: String

  """Car manufacturing years"""
  years: [Int]

  """
  Registration number. This field used only when car is associated with the User entity
  """
  regNumber: String
}

input loginInput {
  """User's contact email (unique)"""
  email: String!

  """User's password"""
  password: String!
  clientMutationId: String
}

type loginPayload {
  """User's authentication token"""
  token: String

  """Authenticated user"""
  user: User
  clientMutationId: String
}

input logoutInput {
  """Valid auth jwt token which should be invalidated"""
  token: String!
  clientMutationId: String
}

type logoutPayload {
  """Logout operation success result"""
  success: Boolean
  clientMutationId: String
}

type Mutation {
  """Updates given user data fields with a given values"""
  updateUser(input: updateUserInput!): updateUserPayload

  """Logs user in and returns valid auth jwt token"""
  login(input: loginInput!): loginPayload

  """Logs user out and invalidates token"""
  logout(input: logoutInput!): logoutPayload

  """Adds a car to a user"""
  addCar(input: addCarInput!): addCarPayload

  """Removes car from a user"""
  removeCar(input: removeCarInput!): removeCarPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Time-table options entity"""
type Options implements Node {
  """The ID of an object"""
  id: ID!

  """
  Start working time, should be a string in form of "HH:MM"
  """
  start: String

  """
  End working time, should be a string in form of "HH:MM"
  """
  end: String

  """Number of boxes available on washing station"""
  boxes: Int

  """Washing time options defined by a service"""
  baseTime: [BaseTimeOption]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """
  Fetches list of users applying given filters and selecting given number of
  records before or after a specified record in the selection list. If the data
  is requested not by admin user the max number of records to fetch is limited
  to 100 (as first or last arguments define). Without a first or last args
  defined it will return first 10 users matching given filters
  """
  users(
    """
    Optional argument, allowing to define filtering criteria for user list selection
    """
    filter: UserFilter
    after: String
    first: Int
    before: String
    last: Int
  ): UserConnection

  """Fetches user data by user id or email"""
  user(
    """User identifier or email to match user object. Optional."""
    idOrEmail: String
  ): User

  """Fetches list of cars for a given brand"""
  cars(
    """Car's manufacturer (brand) name"""
    brand: String!
  ): [Car]

  """Fetches car data by its identifier"""
  car(
    """User identifier. Optional. Either this identifier or email required"""
    id: String!
  ): Car

  """Fetches list of car brands"""
  brands: [String]

  """Fetches all options defined for reservation time table"""
  options: Options
}

input removeCarInput {
  """User's car identifier"""
  carId: String!
  clientMutationId: String
}

type removeCarPayload {
  """Updated user data object"""
  user: User
  clientMutationId: String
}

input updateUserInput {
  """User's first (given) name"""
  firstName: String

  """User's last (family) name"""
  lastName: String

  """User's contact email (unique)"""
  email: String

  """User's password"""
  password: String

  """User's active state flag"""
  isActive: Boolean

  """User's admin role flag"""
  isAdmin: Boolean

  """User registered cars count"""
  carsCount: Int

  """
  User identifier. If provided will perform update, if not provided - will attempt to create new user
  """
  id: ID

  """
  Old password to use for verification of the new password change. It MUST be
  provided when the password field is set to non empty value during update mutation.
  """
  oldPassword: String

  """List of cars associated with the user"""
  cars: [UserCar]
  clientMutationId: String
}

type updateUserPayload {
  """Created or updated user data object"""
  user: User
  clientMutationId: String
}

"""User entity"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """User's first (given) name"""
  firstName: String

  """User's last (family) name"""
  lastName: String

  """User's contact email (unique)"""
  email: String

  """User's password"""
  password: String

  """User's active state flag"""
  isActive: Boolean

  """User's admin role flag"""
  isAdmin: Boolean

  """User cars list"""
  cars: [Car]

  """User registered cars count"""
  carsCount: Int
}

"""User car association object"""
input UserCar {
  """Identifier of car object from cars database"""
  carId: String!

  """Car registration number"""
  regNumber: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""
This type describes an arguments bypassed to a users collection selection filters
"""
input UserFilter {
  """Filters users list by isActive boolean flag"""
  isActive: Boolean

  """Filters users list by isAdmin boolean flag"""
  isAdmin: Boolean

  """Filters users whom firstName matches given string pattern"""
  firstName: String

  """Filters users whom lastName matches given string pattern"""
  lastName: String

  """Filters users whom email address matches given string pattern"""
  email: String
}
